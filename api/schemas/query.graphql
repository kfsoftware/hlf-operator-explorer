type Query {
    peers: [Peer!] @requiresAuth
    peer(input: NameAndNamespace!): Peer @requiresAuth

    orderers: [Orderer!] @requiresAuth
    orderer(input: NameAndNamespace!): Orderer @requiresAuth

    networkConfigEnabled: Boolean!

    cas: [CA!] @requiresAuth
    ca(input: NameAndNamespace!): CA @requiresAuth
    namespaces: [Namespace!] @requiresAuth
    storageClasses: [StorageClass!] @requiresAuth
    channels: [LightChannel!] @requiresAuth
    channel(channelID: String!): Channel! @requiresAuth
    blocks(
        channelID: String!
        from: Int!
        to: Int!
        reverse: Boolean!
    ): BlocksResponse! @requiresAuth
    block(channelID: String!, blockNumber: Int!): Block! @requiresAuth
    blockWithPrivateData(channelID: String!, blockNumber: Int!): BlockWithPrivateData! @requiresAuth
    blockByTXID(channelID: String!, transactionID: String!): Block! @requiresAuth
}
type StorageClass {
    name: String!
}
type LightChannel {
    name: String!
}
type BlocksResponse {
    height: Int!
    blocks: [Block!]
}

type Block {
    blockNumber: Int!
    dataHash: String!
    numTransactions: Int!
    createdAt: Time!
    transactions: [Transaction!]
}

type BlockWithPrivateData {
    blockNumber: Int!
    dataHash: String!
    numTransactions: Int!
    createdAt: Time!
    transactions: [TransactionWithPrivateData!]
}

enum TransactionType {
    MESSAGE
    CONFIG
    CONFIG_UPDATE
    ENDORSER_TRANSACTION
    ORDERER_TRANSACTION
    DELIVER_SEEK_INFO
    CHAINCODE_PACKAGE
}

type Transaction {
    txID: String!
    type: TransactionType!
    createdAt: Time!
    version: String!
    path: String
    response: String
    request: String
    chaincode: String!
    writes: [TransactionWrite!]
    reads: [TransactionRead!]
}
type PDCReadHash {
    pdcName: String!
    keyHash: String!
    rwSetHash: String!
    version: PDCReadVersion
}
type PDCReadVersion {
    blockNum: Int!
    txNum: Int!
}

type PDCWriteHash {
    pdcName: String!
    keyHash: String!
    rwSetHash: String!
    valueHash: String!
    isDelete: Boolean!
    isPurge: Boolean!
}

type TransactionWithPrivateData {
    txID: String!
    type: TransactionType!
    createdAt: Time!
    version: String!
    path: String
    response: String
    request: String
    chaincode: String!
    writes: [TransactionWrite!]
    reads: [TransactionRead!]

    pdcWrites: [PDCWrite!]
    pdcReads: [PDCRead!]

    pdcWriteHashes: [PDCWriteHash!]
    pdcReadHashes: [PDCReadHash!]
}
type PDCRead {
    collectionName: String!
    key: String!
    block: Int!
    txNum: Int!
}
type PDCWrite {
    collectionName: String!
    deleted: Boolean!
    key: String!
    value: String!
}
type TransactionWrite {
    chaincodeID: String!
    deleted: Boolean!
    key: String!
    value: String!
}
type TransactionRead {
    chaincodeID: String!
    key: String!
    blockNumVersion: Int
    txNumVersion: Int
}

type Namespace {
    name: String!
}
input NameAndNamespace {
    name: String!
    namespace: String!
}

type Peer {
    name: String!
    namespace: String!
    yaml: String!
    storage: PeerStorage
}

type Orderer {
    name: String!
    namespace: String!
    yaml: String!
    storage: OrdererStorage
}

type CA {
    name: String!
    namespace: String!
    yaml: String!
    storage: CAStorage
}

type PeerStorage {
    chaincode: StorageUsage
    couchDB: StorageUsage!
    peer: StorageUsage!
}
type CAStorage {
    ca: StorageUsage!
}
type OrdererStorage {
    orderer: StorageUsage!
}
type StorageUsage {
    used: Int!
    usedGB: String!
    free: Int!
    freeGB: String!
    size: Int!
    sizeGB: String!
    percentageUsed: Float!
}

type Channel {
    name: String!
    rawConfig: String!
    protoConfig: String!
    channelConfig: ChannelConfig!
    application: ApplicationConfig
    orderer: OrdererConfig!
    height: Int!
    chaincodes: [ChannelChaincode!]
    peers: [ChannelPeer!]
}
type ChannelPeer {
    mspID: String!
    url: String!
    height: Int!
}
type ChannelChaincode {
    name: String!
    version: String!
    sequence: Int!
    signaturePolicy: SignaturePolicy!
    endorsementPlugin: String!
    validationPlugin: String!
    configPolicy: String!
    privateDataCollections: [PrivateDataCollection!]
    approvals: [ChaincodeApproval!]
}
type ChaincodeApproval {
    mspID: String!
    approved: Boolean!
}
type PrivateDataCollection {
    name: String!
    requiredPeerCount: Int!
    maxPeerCount: Int!
    blockToLive: Int!
    memberOnlyRead: Boolean!
    memberOnlyWrite: Boolean!
    endorsementPolicy: ApplicationPolicy
    memberOrgsPolicy: SignaturePolicy
}
type SignaturePolicy {
    version: Int!
    rule: SignaturePolicyRule!
    principals: [MSPPrincipal!]
}
type MSPPrincipal {
    combined: MSPPrincipalCombined
    role: MSPPrincipalRole
}
type MSPPrincipalRole {
    mspID: String!
    role: String!
}
type MSPPrincipalCombined {
    classification: String!
    mspPrincipals: [MSPPrincipal!]
}
type SignaturePolicyRule {
    type: String!
    noutOf: SignaturePolicyNOutOf
    signedBy: SignaturePolicySignedBy
}
type ApplicationPolicy {
    channelConfigPolicy: String!
    signaturePolicy: SignaturePolicy
}
type SignaturePolicySignedBy {
    signedBy: Int!
}
type SignaturePolicyNOutOf {
    n: Int!
    rules: [SignaturePolicyRule!]
}


type ChannelConfig {
    policies: [ChannelPolicy!]
    capabilities: [String!]
}
type ApplicationConfig {
    policies: [ChannelPolicy!]
    acls: [ChannelACL!]
    capabilities: [String!]
    organizations: [ChannelOrg!]
}
type ChannelACL {
    key: String!
    value: String!
}
type OrdererConfig {
    type: String!
    batchTimeout: Int!
    batchSize: OrdererConfigBatchSize!
    maxChannels: Int!
    capabilities: [String!]
    state: String!
    policies: [ChannelPolicy!]
    etcdDraft: OrdererConfigRaft!
    organizations: [ChannelOrg!]
}
type ChannelOrg {
    modPolicy: String!
    mspID: String!
    policies: [ChannelPolicy!]
    msp: ChannelMSP!
    ordererEndpoints: [String!]
    anchorPeer: [NetworkAddress!]
    nodeOUs: NodeOUs!
    cryptoConfig: CryptoConfig!
    ous: [OUIdentifier!]
}
type CryptoConfig {
    signatureHashFamily: String!
    identityIdentifierHashFunction: String!
}
type NodeOUs {
    enable: Boolean!
    clientOUIdentifier: OUIdentifier!
    peerOUIdentifier: OUIdentifier!
    adminOUIdentifier: OUIdentifier!
    ordererOUIdentifier: OUIdentifier!
}
type OUIdentifier {
    certificate: String!
    ouIdentifier: String!
}
type ChannelMSP {
    name: String!
    rootCerts: [String!]
    intermediateCerts: [String!]
    admins: [String!]
    revocationList: [String!]
    tlsRootCerts: [String!]
    tlsIntermediateCerts: [String!]
}
type OrdererConfigRaft {
    consenters: [OrdererConfigRaftConsenter!]
    options: OrdererConfigRaftOptions!
}
type OrdererConfigRaftConsenter {
    address: NetworkAddress!
    clientTlsCert: String!
    serverTlsCert: String!
}
type NetworkAddress {
    host: String!
    port: Int!
}
type OrdererConfigRaftOptions {
    tickInterval: String!
    electionTick: Int!
    heartbeatTick: Int!
    maxInflightBlocks: Int!
    snapshotIntervalSize: Int!
}
type ChannelPolicy {
    key: String!
    type: String!
    rule: String!
    modPolicy: String!
}
type OrdererConfigBatchSize {
    maxMessageCount: Int!
    absoluteMaxBytes: Int!
    preferredMaxBytes: Int!
}

type ChannelAnchorPeer {
    mspID: String!
    host: String!
    port: Int!
}

